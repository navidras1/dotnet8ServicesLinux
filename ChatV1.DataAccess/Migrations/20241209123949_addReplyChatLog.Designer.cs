// <auto-generated />
using System;
using ChatV1.DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ChatV1.DataAccess.Migrations
{
    [DbContext(typeof(ChatV1Context))]
    [Migration("20241209123949_addReplyChatLog")]
    partial class addReplyChatLog
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ChatV1.DataAccess.Models.ActionType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ActionTypes");
                });

            modelBuilder.Entity("ChatV1.DataAccess.Models.ChatAttachment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ContentType")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UploadDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ChatAttachment");
                });

            modelBuilder.Entity("ChatV1.DataAccess.Models.ChatLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Guid>("ChatGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("ChatStatusId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("ClientDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ForwardedBy")
                        .HasColumnType("text");

                    b.Property<int>("FromEmpId")
                        .HasColumnType("integer");

                    b.Property<string>("FromUserName")
                        .HasColumnType("text");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsRtl")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Reply")
                        .HasColumnType("text");

                    b.Property<int>("ToEmPid")
                        .HasColumnType("integer");

                    b.Property<string>("ToUserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChatStatusId");

                    b.ToTable("ChatLogs");
                });

            modelBuilder.Entity("ChatV1.DataAccess.Models.ChatLogAttachment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ChatAttachmentId")
                        .HasColumnType("bigint");

                    b.Property<long>("ChatLogId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ChatAttachmentId");

                    b.HasIndex("ChatLogId");

                    b.ToTable("ChatLogAttachment");
                });

            modelBuilder.Entity("ChatV1.DataAccess.Models.ChatRoom", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ChatRoomName")
                        .HasColumnType("text");

                    b.Property<long?>("ChatRoomTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreateDatetime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatorUserName")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ChatRoomTypeId");

                    b.ToTable("ChatRooms");
                });

            modelBuilder.Entity("ChatV1.DataAccess.Models.ChatRoomLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ChatLogId")
                        .HasColumnType("bigint");

                    b.Property<long>("ChatRoomId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ChatLogId");

                    b.HasIndex("ChatRoomId");

                    b.ToTable("ChatRoomLogs");
                });

            modelBuilder.Entity("ChatV1.DataAccess.Models.ChatRoomMemeber", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ChatRoomId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChatRoomId");

                    b.ToTable("ChatRoomMemebers");
                });

            modelBuilder.Entity("ChatV1.DataAccess.Models.ChatRoomType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool?>("IsChannel")
                        .HasColumnType("boolean");

                    b.Property<bool?>("Istemp")
                        .HasColumnType("boolean");

                    b.Property<int?>("MaxMember")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ChatRoomTypes");
                });

            modelBuilder.Entity("ChatV1.DataAccess.Models.ChatStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ChatStatus1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ChatStatuses");
                });

            modelBuilder.Entity("ChatV1.DataAccess.Models.EmpMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool?>("IsSuperUser")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastSeenDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EmpMasters");
                });

            modelBuilder.Entity("ChatV1.DataAccess.Models.LogRequestResponse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ControllerName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Request")
                        .HasColumnType("text");

                    b.Property<string>("Response")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LogRequestResponses");
                });

            modelBuilder.Entity("ChatV1.DataAccess.Models.OfflineAction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ActionTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Done")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("DoneDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FromUseName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ToUserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ActionTypeId");

                    b.ToTable("OfflineActions");
                });

            modelBuilder.Entity("ChatV1.DataAccess.Models.SuperUserApi", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ApiPath")
                        .HasColumnType("text");

                    b.Property<string>("ControllerName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SuperUserApi");
                });

            modelBuilder.Entity("ChatV1.DataAccess.Models.UserChatRoomReciever", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ChatLogId")
                        .HasColumnType("bigint");

                    b.Property<int>("ChatStatusId")
                        .HasColumnType("integer");

                    b.Property<long>("ChatroomId")
                        .HasColumnType("bigint");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChatLogId");

                    b.HasIndex("ChatStatusId");

                    b.ToTable("UserChatRoomRecievers");
                });

            modelBuilder.Entity("ChatV1.DataAccess.Models.UserContanct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("EmpMasterId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmpMasterId");

                    b.ToTable("UserContancts");
                });

            modelBuilder.Entity("ChatV1.DataAccess.Models.ChatLog", b =>
                {
                    b.HasOne("ChatV1.DataAccess.Models.ChatStatus", "ChatStatus")
                        .WithMany("ChatLogs")
                        .HasForeignKey("ChatStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatStatus");
                });

            modelBuilder.Entity("ChatV1.DataAccess.Models.ChatLogAttachment", b =>
                {
                    b.HasOne("ChatV1.DataAccess.Models.ChatAttachment", "ChatAttachment")
                        .WithMany("ChatLogAttachments")
                        .HasForeignKey("ChatAttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChatV1.DataAccess.Models.ChatLog", "ChatLog")
                        .WithMany("ChatAttachments")
                        .HasForeignKey("ChatLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatAttachment");

                    b.Navigation("ChatLog");
                });

            modelBuilder.Entity("ChatV1.DataAccess.Models.ChatRoom", b =>
                {
                    b.HasOne("ChatV1.DataAccess.Models.ChatRoomType", "ChatRoomType")
                        .WithMany("ChatRooms")
                        .HasForeignKey("ChatRoomTypeId");

                    b.Navigation("ChatRoomType");
                });

            modelBuilder.Entity("ChatV1.DataAccess.Models.ChatRoomLog", b =>
                {
                    b.HasOne("ChatV1.DataAccess.Models.ChatLog", "ChatLog")
                        .WithMany("ChatRoomLogs")
                        .HasForeignKey("ChatLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChatV1.DataAccess.Models.ChatRoom", "ChatRoom")
                        .WithMany("ChatRoomLogs")
                        .HasForeignKey("ChatRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatLog");

                    b.Navigation("ChatRoom");
                });

            modelBuilder.Entity("ChatV1.DataAccess.Models.ChatRoomMemeber", b =>
                {
                    b.HasOne("ChatV1.DataAccess.Models.ChatRoom", "ChatRoom")
                        .WithMany("ChatRoomMemebers")
                        .HasForeignKey("ChatRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatRoom");
                });

            modelBuilder.Entity("ChatV1.DataAccess.Models.OfflineAction", b =>
                {
                    b.HasOne("ChatV1.DataAccess.Models.ActionType", "ActionType")
                        .WithMany("OfflineActions")
                        .HasForeignKey("ActionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActionType");
                });

            modelBuilder.Entity("ChatV1.DataAccess.Models.UserChatRoomReciever", b =>
                {
                    b.HasOne("ChatV1.DataAccess.Models.ChatLog", "ChatLog")
                        .WithMany("UserChatRoomReciever")
                        .HasForeignKey("ChatLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChatV1.DataAccess.Models.ChatStatus", "ChatStatus")
                        .WithMany("UserChatRoomRecievers")
                        .HasForeignKey("ChatStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatLog");

                    b.Navigation("ChatStatus");
                });

            modelBuilder.Entity("ChatV1.DataAccess.Models.UserContanct", b =>
                {
                    b.HasOne("ChatV1.DataAccess.Models.EmpMaster", "EmpMaster")
                        .WithMany("UserContancts")
                        .HasForeignKey("EmpMasterId");

                    b.Navigation("EmpMaster");
                });

            modelBuilder.Entity("ChatV1.DataAccess.Models.ActionType", b =>
                {
                    b.Navigation("OfflineActions");
                });

            modelBuilder.Entity("ChatV1.DataAccess.Models.ChatAttachment", b =>
                {
                    b.Navigation("ChatLogAttachments");
                });

            modelBuilder.Entity("ChatV1.DataAccess.Models.ChatLog", b =>
                {
                    b.Navigation("ChatAttachments");

                    b.Navigation("ChatRoomLogs");

                    b.Navigation("UserChatRoomReciever");
                });

            modelBuilder.Entity("ChatV1.DataAccess.Models.ChatRoom", b =>
                {
                    b.Navigation("ChatRoomLogs");

                    b.Navigation("ChatRoomMemebers");
                });

            modelBuilder.Entity("ChatV1.DataAccess.Models.ChatRoomType", b =>
                {
                    b.Navigation("ChatRooms");
                });

            modelBuilder.Entity("ChatV1.DataAccess.Models.ChatStatus", b =>
                {
                    b.Navigation("ChatLogs");

                    b.Navigation("UserChatRoomRecievers");
                });

            modelBuilder.Entity("ChatV1.DataAccess.Models.EmpMaster", b =>
                {
                    b.Navigation("UserContancts");
                });
#pragma warning restore 612, 618
        }
    }
}
